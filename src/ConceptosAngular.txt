-----------------------------------------
Una aplicación Angular está formada por: 
-----------------------------------------

    1. Componentes: 
       Cada componente va a controlar un trozo de pantalla.
       Un componente dará soporte a una vista interactuando con ella a través de un API (propiedades y métodos).
       El componente hace de mediador entre la vista (a través de la Plantilla) y la lógica de la app donde se incluirá el modelo de datos.
       Sería como un Controlador de MVC.

    2. Plantilla: 
       Cada una de las vistas de la aplicación. HTMLs con sintaxis angular.

    3. Decoradores y Metadatos:
       Los decoradores (patrón de diseño Decorador) permiten configurar dinámicamente atributos y metadatos de las clases y componentes.
       Los metadatos van a describir las clases y las relaciones entre los componentes y demás elementos.

    4. Servicios:
       Son clases con un objetivo claro que facilitan la reutilización. Mediante la inyección de dependencias las podemos usar en otros componentes principales.

    5. Providers:
       Son servicios que nos proveen de datos o funcionalidades mediante sus métodos. Angular tiene los suyos propios pero podemos crear los nuestros.
    
    6. Directivas:
       Son funcionalidades aplicables al DOM y a los elementos Html en las plantillas de los componentes. Son como atributos para aplicar a cualquier elemento de la plantilla.
       Ej. 
            directiva para controlar que un div se muestre o no.
            directiva para recorrer un array en la vista.
            directiva para darle un estilo a un elemento.
            directiva para interactuar con el modelo de datos del componente.
       
       Diferentes tipos: estructurales, estructuras condicionales y de control 

    7. Módulos:
       Angular se puede hacer modular, disponiendo de diferentes módulos que serán reutilizables.
    

---------------------
 Instalación Angular
---------------------

    1. Actualizar o instalar la versión de NodeJs:  https://nodejs.org/es/
    2. Abrir CMD
    3. Actualizamos la versión del npm:  npm install -g npm@latest
    4. Borramos la cache del npm para evitar versiones obsoletas: npm cache clean --force
    5. Desactivar las auditorías del npm al instalar: npm set audit false
    6. Desinstalar versiones de Angular CLI si las hubiera. Es el motor de Angular: 
            npm uninstall -g angular-cli
            npm uninstall -g @angular/cli
    7. Borramos de nuevo la cache: npm cache clean --force
    8. Instalamos Angular CLI: npm install -g @angular/cli@latest
    9. Creamos nuestro proyecto de angular, para ello vamos al directorio raiz de nuestros proyectos y tecleamos:
            ng new 
       Nos preguntará el nombre del proyecto.
       Indicar que No a añadir Angular Routing, lo haremos después a mano.
       Indicar CSS 
       No hacer caso a los warning, solo fijarnos que al final ponga: Successfully initialized git.
    10. Nos metemos en la carpeta que ha creado en el paso anterior y ejecutamos la compilación y puesta en marcha:
            ng serve
    11. Ya podemos trabajar en nuestro proyecto, para ello dejaremos minimizado la pantalla del paso anterior con la ejecución del ng serve


---------------------------------
 Estructura del proyecto inicial
---------------------------------

1. Archivos de configuración propios de typescript:
        tsconfig.*     
        tslint.*
2. README.md con la documentación acerca del proyecto
3. Ficheros de instalación de paquetes: package.*
4. karma.conf.js : fichero para configurar temas de pruebas
5. angular.json : para configurar el proyecto y cargar scripts, ...
6. .gitignore : indica los ficheros que no se siguen con git
7. .editorconfig : fichero de configuración para el editor
8. carpeta e2e : para temas de testing, en mi versión no está
9. carpeta de los módulos de node: node_modules
10. carpeta src: contiene el código
        main.ts : archivo principal del programa en typescript
        index.html y styles.css como siempre
        carpeta app : carpeta que contiene nuestros componentes
            app.component.ts : componente por defecto
            app.module.ts : módulo principal
                podemos hacer tantos módulos como queramos
            app.component.css y app.component.html son los estilos y vista del componente


------------------------
 Análisis de Componente
------------------------

Cada trozo de pantalla o vista es un componente, en una app de Angular hay muchos.
Los componentes tienen extensión: .ts mientras que las vistas serán .html

Importamos la clase Component del core de Angular:
   import { Component } from '@angular/core';

Declaramos la clase que va a integrar el Componente:

  Indicamos mediante el decorador @Component algunas propiedades de la clase:
   @Component({
      selector: 'app-root',                        >> Indica la etiqueta que tiene el componente en el index.html para identificarlo
      templateUrl: './app.component.html',         >> Vista asociada al componente
      styleUrls: ['./app.component.css']           >> Hoja de estilos asociada al componente
   })

  Declaramos la clase propiamente dicha como exportable:
   export class AppComponent {
      title = 'AprendiendoAngular';                >> Propiedad title del componente
   }

  En la vista podremos hacer referencia a las propiedades de la clase Componente mediante los dobles paréntesis:
      <span>{{ title }} app is running!</span>


---------------------
 Análisis del Módulo
---------------------

Dentro del módulo tendré que importar el componente que hemos definido y declararlo para que en toda la app se pueda utilizar sin necesidad de volver a importarlo:

   import { NgModule } from '@angular/core';
   import { BrowserModule } from '@angular/platform-browser';

   import { AppComponent } from './app.component';                      >> lo importamos

   @NgModule({
   declarations: [
      AppComponent                                                      >> lo declaramos
   ],
   imports: [
      BrowserModule                                                     >> módulos que queremos importar para uso en el resto del aplicativo
   ],
   providers: [],                                                       >> cargamos servicios
   bootstrap: [AppComponent]                                            >> indicamos el componente incial o principal del aplicativo
   })
   export class AppModule { }


--------------------------------
 Propiedades y tipos en Angular
--------------------------------

Dentro de Angular podemos declarar los tipos de las propiedades y variables. Los tipos serían:
   Number como number
   Boolean como boolean
   String como string
   Void como void
   Null como null
   Undefined como undefined
   Any como any
   Array<type>


------------------------------------------------------------
 Generación de componentes en Angular de forma automatizada
------------------------------------------------------------
URL de comandos Angular-cli:
   https://angular.io/cli
Dentro del directorio donde tenemos angular (ng generate):
   ng g component carpeta_donde_ubicarlo/nombre_del_componente

   ej. ng g component components/peliculas

Después ejecutamos el servidor de Angular: ng serve


-------
 Hooks
-------
Eventos del ciclo de vida de un componente
Se lanzan formando el ciclo de vida de dicho componente, similar a los eventos de un formulario en .net

OnInit: se ejecuta al iniciarse el ciclo de vida del componente. Es el primer método que se ejecuta después del constructor de nuestro componente

DoCheck: se ejecuta después de cambios de estado en el componente.

OnDestroy: justo antes de destruirse el componente.

   ej. 
   
      import { Component, OnInit, DoCheck, OnDestroy } from '@angular/core';

      export class PeliculasComponent implements OnInit, DoCheck, OnDestroy {

         constructor() {}

         ngOnInit() {}

         ngDoCheck() {}

         ngOnDestroy() {}
      }


--------------------------
 Directivas Condicionales
--------------------------

Permiten mostrar divs cuando se cumpla una condición:
Cuando la propiedad del componente peliculas llamada mostrarPeliculas de tipo boolean sea cierta se mostrará el componente dentro del div

   <div *ngIf="mostrarPeliculas">
      <peliculas></peliculas>
   </div>

Se pueden aplicar a otros elementos, por ejemplo al <h2>
Se pueden enlazar varias condiciones con || y && y también el operador !
   ej. 
      <h2 *ngIf="nombre && apellidos">{{nombre}} y {{apellido}}</h2>
      <h2 *ngIf="!nombre && !apellidos">{{nombre}} y {{apellido}}</h2>


-----------------------------
 Botones y click en el mismo
-----------------------------
Este código llama al método ocultarPeliculas() del componente al que pertenece la vista al hacer click en el botón Ocultar Películas:

   <button (click)="ocultarPeliculas()">Ocultar Películas</button>


----------------------------
 Añadir una hoja de estilos 
----------------------------
Se podría añadir dentro del index.html principal, como siempre un link:
   <link rel="stylesheet" type="text/css" href="assets/css/style.css">
Pero la forma correcta de hacerlo sería añadiendo la hoja en el fichero angular.json:
   "styles": [
      "src/styles.css",
      "src/assets/css/styles.css"
   ],
IMPORTANTE: Tendremos que volver a parar y arrancar el ng serve si queremos que aplique el cambio 


---------------------------
 Configuración del Routing
---------------------------
Creamos un nuevo archivo dentro de src/app llamado app.routing.ts

En el interior de este archivo definimos los siguientes apartados:

   // Importar los módulos del router de Angular ( ModuleWithProviders, Routes, RouterModule )
   // Importar componentes a los cuales quiero hacer una página exclusiva ( HomeComponent, BlogComponent, FormularioComponent, PeliculasComponent, PaginaComponent )
   // Array de rutas: cada ruta viene definida por un path y el componente que se mostrará 
         const appRoutes: Routes = [
            {path: '', component: HomeComponent},
            {path: 'home', component: HomeComponent},
            {path: 'blog', component: BlogComponent},
            {path: 'formulario', component: FormularioComponent},
            {path: 'peliculas', component: PeliculasComponent},
            {path: 'pagina-de-pruebas', component: PaginaComponent}
         ];
   // Exportar el módulo de rutas: appRoutingProviders, routing
   // Al mismo tiempo que exportamos el Módulo y el Servicio establecemos todas las rutas definidas
         RouterModule.forRoot( appRoutes ); 

Dentro del fichero app.module.ts definimos el Modulo y el Servicio exportados anteriormente:
   dentro del apartado imports indicamos el Módulo:
      imports: [
         BrowserModule,
         routing
      ],
   dentro del apartado providers indicamos el Servicio:
      providers: [ appRoutingProviders ],

En el html del componente principal eliminamos la carga estática de contenido y le ponemos:
   <section id="content"> 
      <router-outlet></router-outlet>
   </section>

   Esta etiqueta lo que hace es detectar si tenemos cargada alguna de las rutas que hemos definido en el app.routing.ts y en ese caso cargar su componente

Crear Ruta para las páginas de error o rutas inexistentes:
   Creamos un nuevo componente llamado error que solo se mostrará en los casos comentados.
   En el path definimos "**" que indica que se usará para todas, es importante ponerla la última de la lista de rutas para que no se ejecute antes que cualquier otra, puesto que también entraría para las demás rutas.
      { path: '**', component: ErrorComponent }


--------------------------------------------------------------------
 Hacer un menú de navegación reactivo y que no recargue las páginas
--------------------------------------------------------------------
Modificamos el html del menú de navegación e indicamos el atributo RouterLink para cada enlace indicando su ruta:
   ej. 

      <li>
         <a href="index.html">Inicio</a>
      </li>

      <li>
         <a [routerLink]="['/home']">Inicio</a>
      </li>


-------------------------------------------------------------------------------------
 Indicar que un elemento al activarse tenga la clase X (en este caso llamada activa)
-------------------------------------------------------------------------------------
<a [routerLink]="['/home']" [routerLinkActive]="['active']">Inicio</a>

   se hace mediante el atributo routerLinkActive y se asigna la correspondiente clase. Esto se hará para todos los elementos del menú de navegación.


---------------------------------------
 Rutas que llevan parámetros en la URL
---------------------------------------
Si queremos añadir un parámetro a la ruta:  { path: 'pagina-de-pruebas', component: PaginaComponent },
Lo hacemos con la siguiente sintaxis: { path: 'pagina-de-pruebas/:nombre', component: PaginaComponent },
   en este caso deberá llevar el parámetro: nombre
   al indicar esto en las rutas dejará de existir la ruta pagina-de-pruebas sin indicar ningún parámetro
   
Si queremos que el parámetro sea opcional y por lo tanto siga funcionando la ruta si no lo indicamos deberemos crear otra ruta con el mismo enrutado pero sin dicho parámetro


-----------------------------------------------------------
 Recoger el parámetro de una URL en el componente y usarlo
-----------------------------------------------------------
En el fichero de la clase del componente hacemos lo siguiente: 

   1. Realizamos la importación siguiente:
         import { Router, ActivatedRoute, Params } from '@angular/router';
   2. Creamos variables privadas en el constructor para esas importaciones:
         constructor (
            // servicios de enrutado
            private _route: ActivatedRoute,   // sacar los parámetros de la URL
            private _router: Router           // redirecciones a otras páginas
         ) { }

   3. En el evento OnInit hacemos lo siguiente:
         ngOnInit() {
            // nos suscribimos a lo que se llama en Angular un Observable, viene a ser un elemento que puede ser asíncrono 
            this._route.params.suscribe((params) => {
               console.log(params);  // muestra los parámetros de la URL al llamarla
            })
         }


--------------------------
 Redirecciones de una URL
--------------------------
Usamos el navigate dentro de los métodos del router:
   this._router.navigate(['/formulario']);

Con paso de parámetros:
   this._router.navigate(['/pagina-de-pruebas', 'Victor', 'Robles']);

   los parámetros van como parámetros de la llamada a Navigate, cada nuevo parámetros será un parámetros en la URL


-----------------------
 Directivas en Angular
-----------------------
1. ngIf (condicional):

   <div *ngIf="peliculas.length <= 3">
       Hay pocas películas
   </div>
   <div *ngIf="peliculas.length > 3">
       Hay muchas películas
   </div>

   Se puede aplicar a cualquier elemento html. 

2. ngFor (bucle):

   <article class="article-item" *ngFor="let pelicula of peliculas; let i = index;">
       <div class="image-wrap">
           <img src="{{ i }} {{ pelicula.image }}" alt="{{ pelicula.title }}"/>
       </div>
       <h2>{{ pelicula.title }}</h2>
   </article>

3. ngStyle (estilos):

   <span class="year" [style.background]="pelicula.year > 2016 ? 'green' : 'red'">{{ pelicula.year }}</span>

4. ngClass (clases css):

   <span class="year" [class.year-green]="pelicula.year > 2016" [class.year-red]="pelicula.year <= 2016">{{ pelicula.year }}</span>

o de esta otra forma más elegante:

   <span class="year" [ngClass]="{
                                    'year-green': pelicula.year > 2016, 
                                    'year-red':   pelicula.year <= 2016
                                 }">
         {{ pelicula.year }}
   </span>

5. ngTemplate:

   En angular con el ngIf no podemos hacer directamente un if/else, pero podemos usar una template para ello:

   Caso sin else ni template: con 2 if seguidos (condicion del contrario)

      <div *ngIf="nombre && apellidos">
         <h2>Datos completos</h2>
      </div>
      <div *ngIf="!nombre || !apellidos">
         <h2>Datos Incompletos</h2>
      </div>

   Caso con template:

      <div *ngIf="nombre && apellidos; else noHayParametros">
         <h2>Datos completos</h2>
      </div>
      <ng-template #noHayParametros>
         <h2>Datos Incompletos</h2>
      </ng-template>

   Otra manera más clara es con una template para cada caso del condicional:

      <div *ngIf="nombre && apellidos; then siHayParametros else noHayParametros">
      </div>

      <ng-template #siHayParametros>
         <h2>Datos completos</h2>
      </ng-template>
      <ng-template #noHayParametros>
         <h2>Datos Incompletos</h2>
      </ng-template>

6. ngSwitch: 

   <p>Resultado:
      <span [ngSwitch]="operacion">
         <span *ngSwitchCase="'sumar'">{{valor1+valor2}}</span>
         <span *ngSwitchCase="'restar'">{{valor1-valor2}}</span>
         <span *ngSwitchCase="'multiplicar'">{{valor1*valor2}}</span>
         <span *ngSwitchCase="'dividir'">{{valor1/valor2}}</span>
         <span *ngSwitchDefault>(No eligió operación)</span>
      </span>
   </p>


-----------------------------------------------------
 Modelos en Angular y Comunicación entre Componentes
-----------------------------------------------------
Un Modelo es una clase que representará a un tipo de objeto dentro de la aplicación.

Ej. 
      export class Pelicula {
      
         // PROPIEDADES 

         // public title: string;
         // public year: number;
         // public image: string;

         // Constructor

         // constructor( title:string, year:number, image:string ) {
         //     this.title = title;
         //     this.year = year;
         //     this.image = image;
         // }

         // Contructor con la definición de propiedades: ahorramos teclear asignaciones innecesarias
         // IMPORTANTE: Esto equivale a lo anterior

         constructor (
            public title: string,
            public year: number,
            public image: string
         ) { }
      }

Luego con importarlo en alguno de nuestros componentes ya podremos hacer uso del Modelo


----------------------------
 Propiedades INPUT y OUTPUT
----------------------------
Permiten comunicarse a los componentes padres e hijos entre ellos.

INPUT: desde el componente padre se envía información al componente hijo.

  Ej. Componente padre: app.component, componente hijo slider.component:

   IMPORTANTE: si no ponemos entre comillas simples el texto a pasar lo busca como propiedad del componente padre, es decir que si no ponemos comillas simples estaríamos pasando el contenido de una propiedad del componente padre

   >>PADRE: app.component.html

      <app-header></app-header>
      <app-slider
         [propiedad_a_comunicar_al_hijo]="'valor propiedad desde el padre'"
      ></app-slider>

      <!-- ARTICULOS Y BARRA LATERAL -->
      ...


   >>HIJO: slider.component.ts

      IMPORTANTE importar el decorador Input y mantener el mismo nombre de la propiedad que en el PADRE

      import { Component, Input } from '@angular/core';

      @Component({
      selector: 'app-slider',
      templateUrl: './slider.component.html',
      styleUrls: ['./slider.component.css']
      })
      export class SliderComponent {

         @Input() propiedad_a_comunicar_al_hijo: string = "";

         constructor () {

         }
      }


OUTPUT:

   Desde el componente hijo se define una propiedad Output que será de tipo EventEmitter (un evento).
   Tendremos un método que se puede activar de cualquier forma en el componente y que al activarse emitirá dicho evento para que llegue al componente padre:
         this.MarcarFavorita.emit({ pelicula: pelicula })

   Ej. Componente hijo:

      export class PeliculaComponent {

         @Output() MarcarFavorita = new EventEmitter();

         seleccionar(event: Event, pelicula: Pelicula) {
            this.MarcarFavorita.emit({
            pelicula: pelicula
            })
         }
      }

   En el componente padre tendremos la opción de recojer datos (en este ejemplo la pelicula) al capturar el evento que se ha emitido desde el componente hijo.
   Para ello en la vista html del componente padre declaramos que el evento (MarcarFavorita) se tratará llamando al método mostrarFavorita(event) cuando ocurra dicho evento.
   La asociación del evento producido en el componente hijo (MarcarFavorita) con el método que lo trata está dentro de las etiquetas que definen el componente hijo: <app-pelicula>

   Vista del componente padre:

        <div id="articles" *ngIf="peliculas">
            <!-- Listado de artículos -->
            <div *ngFor="let pelicula of peliculas; let i = index;">
                <app-pelicula
                    [pelicula] = "pelicula"
                    (MarcarFavorita) = "mostrarFavorita($event)"
                ></app-pelicula>
            </div>            
        </div>

   Dentro del componente padre definimos el método que trata el evento:

         mostrarFavorita( event ) {
            if (event && event.pelicula)
               this.favorita = event.pelicula;
         }

   Ya disponemos del dato (pelicula) que nos envió el componente hijo dentro del componente padre.


-------
 PIPES
-------
Son pequeñas funcionalidades que tenemos dentro de nuestras vistas: 

   ej. pipe uppercase

         {{ favorita.title | uppercase }}

Ver documentación en angular de las pipes existentes.

Existen pipes para transformar textos, para manejo de fechas, ...

   ej. {{ this.fecha | 'dd/MM/yyyy' }}
       {{ this.fecha | date }}


----------------------
 PIPES Personalizadas
----------------------
Es parecido a crear una clase o componente, pero con determinadas sintaxis y relaciones con los objetos Pipe y PipeTransform:

   ej. 
      import { Pipe, PipeTransform } from '@angular/core';

      // comprueba si un número es par o impar
      @Pipe({
         name: 'espar'
      })
      export class EsParPipe implements PipeTransform {

         transform( value: any ) {
            return value;
         }
      }

   Para poder utilizarla en el resto del proyecto deberemos declararla en el Module (app.module.ts):

      // PIPES
      import { EsParPipe } from './pipes/espar.pipe';

      añadirla en las declaraciones:

         @NgModule({
            declarations: [
               ...,
               EsParPipe
            ],


------------------------
 Formularios en Angular
------------------------
Se define el formulario en la vista html del componente relacionado y el siguiente paso es vincular los campos del formulario con propiedades del componente:

1. Importar el FormsModule en nuestro app.module.ts para que funcionen los Formularios:
      import { FormsModule } from '@angular/forms';
2. Dentro de los imports que tenemos en el fichero app.module.ts añadimos FormsModule: 
      imports: [
         BrowserModule,
         routing,
         FormsModule
      ],
3. Definimos el método submit para el formulario dentro de la vista de nuestro componente (formulario html):
      <form class="mid-form" (ngSubmit)="onSubmit()">
   El método onSubmit() lo tenemos que definir en nuestro componente:
      onSubmit() {
         alert('Enviado!!!');
      }
4. Identificamos el formulario:
      <form class="mid-form" #userForm="ngForm" (ngSubmit)="onSubmit()">
   Indicando con #userForm el tipo de formulario (ngForm) = formulario de angular
5. Para cada campo html del formulario a recoger le indicamos:
      a) identificador y tipo de campo:  #nombre="ngModel"  (le indicamos que es un campo del modelo)
      b) relación con el objeto y campo del modelo: [(ngModel)]="user.nombre"
         Esta relación hará que automáticamente en el submit nos informe dicho objeto (user) en su propiedad (nombre)
      IMPORTANTE: los datos una vez informados (y sin haber hecho el submit) se modifican tanto en el componente como en su propia vista, mostrando en tiempo real lo escrito en el formulario si lo estamos presentando.
      Es un binging directo!
6. Indicar si el campo es requerido con el atributo required en cada elemento:
      <input type="text" name="nombre" #nombre="ngModel" [(ngModel)]="user.nombre" required />
7. Poner un mensaje condicional a mostrar en caso de no ser correcto y haberse modificado por el usuario (touched):
      <small *ngIf="!nombre.valid && nombre.touched">El nombre no es válido!</small>
   Podemos aplicar patrones de HTML5 mediante pattern:
      <input type="text" name="nombre" #nombre="ngModel" [(ngModel)]="user.nombre" required pattern="[a-zA-Z]+"/>
   Con esto aplicamos expresiones regulares que deben cumplirse para ese campo
8. Evitar que se envíe el formulario cuando no sean todos los datos válidos:
      <input type="submit" value="Enviar" class="btn btn-success" [disabled]="userForm.invalid" />


---------
 Eventos
---------
(click) -> click en un botón
(blur) -> abandonar un campo
(keyup) -> soltar una tecla
   permite modificadores: ej. (keyup.enter)


----------------------
 Servicios en Angular
----------------------
Los componentes de nuestra aplicación tienen un trabajo, presentar datos y permitir que el usuarios interactúe con esa información.
Tal como la documentación de Angular indica, un Componente no debe tener la responsabilidad de consultar datos o almacenarlos, esa responsabilidad es para los Servicios.
El trabajo de un servicio es el de controlar la información, desde obtenerla, almacenarla, actualizarla y compartirla con los componentes.

Definir en un fichero el servicio implica algo como:

   import { Injectable } from "@angular/core"; // imprescindible para declarar un servicio
   import { Pelicula } from "../models/Pelicula";

   @Injectable()                   // decorador del servicio
   export class PeliculaService {
      ...
   }

En el componente que va a hacer uso del servicio lo importamos y luego lo pasamos como parámetro del constructor haciendo uso de sus métodos:

   import { PeliculaService } from 'src/app/services/pelicula.service'; // importamos un servicio

   constructor( 
      private _peliculaService: PeliculaService // declaramos una variable privada para poder usar el servicio en nuestro constructor
    ) {    
      this.titulo = "Componente Películas";
      this.peliculas = this._peliculaService.getPeliculas();
      console.log("Constructor lanzado!");    
   }


----------------
 Servicios HTTP
----------------
En el fichero de Modulo: app.module.ts debemos importar:

   import { HttpClientModule } from '@angular/common/http'; // necesario para las peticiones http en Angular

   Lo añadimos a la lista de imports:

      imports: [
         BrowserModule,
         routing,
         FormsModule,
         HttpClientModule
      ],

En nuestro servicio Http importamos:

   import { Injectable } from "@angular/core";
   import { HttpClient, HttpHeaders } from '@angular/common/http';
   import { Observable } from "rxjs";
   import { Article } from "../models/Article";

Definimos el servicio:

   @Injectable()
   export class ArticleService {

      public url: string;

      constructor(
         private _http: HttpClient
      ) {
         this.url = Global.url;
         console.log('>>>>>>>>>>>' + this.url);
      }

      getArticles():Observable<any> {
         return this._http.get(this.url + 'articles');
      }
   }

Usamos el servicio en nuestro componente:

   Lo importamos:  
      import { ArticleService } from 'src/app/services/article.service'; // importamos el servicio de artículos
   
   Lo añadimos como Provider del componente:
      @Component({
         selector: 'app-blog',
         templateUrl: './blog.component.html',
         styleUrls: ['./blog.component.css'],
         providers: [ArticleService]  // para uso del servicio de artículos
      })

   Lo usamos en el componente:
      export class BlogComponent implements OnInit {

         constructor(
            private _articleService: ArticleService
         ) {

         }

         ngOnInit(): void {
            console.log(this._articleService.pruebasServicio());


            this._articleService.getArticles().subscribe( 
               ( response ) => { 
                  console.log( response )
               },        
               ( error ) => { 
                  console.log( error )         
               }
            );
            
         }
      }


----------------------
 CORS y sus problemas
----------------------

Obtenemos el error de seguridad provocado al invocar al backend desde un dominio diferente al del mismo: 

Vamos a nuestra aplicación de backend y desde consola instalamos CORS si no lo tenemos en la carpeta node_modules

   npm install cors

Confirmamos que ya tenemos la carpeta de cors dentro de la carpeta node_modules

Dentro de nuestro archivo principal, donde tenemos 
   // ejecutar express (http)
   const app = express();

Ponemos antes de esas líneas:
   // uso de cors para la seguridad
   const cors = require('cors');

Y justo después:
   app.use(cors()); // uso de cors para la seguridad

Con esto ya bastaría, pero dejaríamos abierto a todas las urls el acceso, si queremos tener una lista blanca de accesos y otro negra podemos hacer esto en lugar de esta última línea:
   app.use(cors()); // uso de cors para la seguridad
   var whiteList = ['http://localhost:4200', '...'];

   var corsOptions = {
      origin: function ( origin, callback ) {
         if ( whiteList.indexOf( origin ) != -1 ) {
            callback( null, true );
         } else {
            callback( new Error('Not allowed by CORS') );
         }
      }
   }

Con esto ya podríamos añadir nuesvas urls a la lista blanca para permitir el acceso denegando al resto el mismo.

En las llamadas al backend tendríamos que usar esta variable llamando al cors y pasándola como parámetro:

   app.get( '/', cors( corsOptions ), (res, req) => {
      res.json( {mensaje: 'ok'} );
   })



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>>>>>>  TODO LO QUE VIENE A CONTINUACION DE ESTE TEMA NO HA FUNCIONADO <<<<<<<<<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


ej. Access to XMLHttpRequest at 'http://localhost:3900/api//upload-image' from origin 'http://localhost:4200' has been blocked by CORS policy: Response to preflight request doesn't pass access control check: It does not have HTTP ok status.

Para evitar este error creamos un fichero json de configuración de proxy que luego le indicaremos a nuestro inicio de angular:

1. en la raiz del proyecto llamante creamos el fichero proxy.conf.json con este contenido
      {
         "/api/*": {
            "target":"http://localhost:3900",
            "secure": false,
            "loglevel": "debug"
         }
      }

   Cumpliendo que /api/ es el inicio de nuestras llamadas a nuestro backend y que http://localhost:3900 es la url del mismo.

   Si tenemos el backend en otra máquina diferente a la local hay que indicar otra variable especificando que el origen es diferente:

      {
         "/api/*": {
            "target":"http://localhost:3900",
            "secure": true,     // habría seguramente que indicar que lleva ssl por estar en otro servidor
            "loglevel": "debug",
            "changeOrigin": true
         }
      }

2. Modificamos el archivo angular.json de nuestro proyecto para añadir en "serve" la opción proxyConfig:

      "serve": {
          "builder": "@angular-devkit/build-angular:dev-server",
          "options": {
            "proxyConfig": "proxy.conf.json"
      },

3. Modificamos las llamadas a nuestro servicio para que ya no contengan http://localhost:3900 sino que será angular quien lo complete con la información del proxy-config

      ej. 
      
      getArticle( articleId ):Observable<any> {
           return this._http.get( 'http://localhost:3900/api/article/' + articleId );
      }

   quedaría como: 

      getArticle( articleId ):Observable<any> {
           return this._http.get( '/api/article/' + articleId );
      }


Otra opción era poner en el archivo package.json la indicación del proxy:  

"scripts": {
    "ng": "ng",
    "start": "ng serve --proxy-config proxy.conf.json",
    "build": "ng build",
    "watch": "ng build --watch --configuration development",
    "test": "ng test"
  },